# coding: utf-8

"""
    vRealize Network Insight API Reference

    vRealize Network Insight API Reference

    OpenAPI spec version: 1.1.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LicenseDeactivateStatusCode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'int',
        'code_str': 'str'
    }

    attribute_map = {
        'code': 'code',
        'code_str': 'codeStr'
    }

    def __init__(self, code=None, code_str=None):
        """
        LicenseDeactivateStatusCode - a model defined in Swagger
        """

        self._code = None
        self._code_str = None

        if code is not None:
          self.code = code
        if code_str is not None:
          self.code_str = code_str

    @property
    def code(self):
        """
        Gets the code of this LicenseDeactivateStatusCode.
        status codes for delete operation

        :return: The code of this LicenseDeactivateStatusCode.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this LicenseDeactivateStatusCode.
        status codes for delete operation

        :param code: The code of this LicenseDeactivateStatusCode.
        :type: int
        """

        self._code = code

    @property
    def code_str(self):
        """
        Gets the code_str of this LicenseDeactivateStatusCode.
        string for status code

        :return: The code_str of this LicenseDeactivateStatusCode.
        :rtype: str
        """
        return self._code_str

    @code_str.setter
    def code_str(self, code_str):
        """
        Sets the code_str of this LicenseDeactivateStatusCode.
        string for status code

        :param code_str: The code_str of this LicenseDeactivateStatusCode.
        :type: str
        """
        allowed_values = ["OK", "UNEXPECTED_FAILURE", "INVALID_LICENSE", "UNSUPPORTED_DELETE_LAST_LICENSE", "NOT_FOUND"]
        if code_str not in allowed_values:
            raise ValueError(
                "Invalid value for `code_str` ({0}), must be one of {1}"
                .format(code_str, allowed_values)
            )

        self._code_str = code_str

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LicenseDeactivateStatusCode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
